#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

class Book {
public:
    string title;
    string author;

    Book(const string& title, const string& author)
        : title(title), author(author) {
    }
};

class BookManager {
private:
    vector<Book> books; // 책 목록 저장

public:
    // 책 추가 메서드
    void addBook(const string& title, const string& author) {
        books.push_back(Book(title, author));
        cout << "\n책이 추가되었습니다: " << title << " by " << author << "\n";
    }

    // 모든 책 출력 메서드
    void displayAllBooks() const {
        if (books.empty()) {
            cout << "현재 등록된 책이 없습니다." << "\n";
            return;
        }

        cout << "\n현재 도서 목록:" << endl;
        for (size_t i = 0; i < books.size(); i++) {
            cout << i + 1 << "번 " << books[i].title << " by " << books[i].author << "\n";
        }
    }

    const Book* searchByTitle(const string& title) const {
        for (const auto& book : books) { // 책 제목이 동일한 경우는 없다고 가정함
            if (book.title == title)
                return &book;
        }
        return nullptr;
    }
    
    vector<const Book*> searchByAuthor(const string author) const {
        vector<const Book*> results;
        for (const auto& book : books) {
            if (book.author == author)
                results.push_back(&book);
        }
        return results;
    }    
};

class BorrowManager {
private:
    unordered_map<string, int> stock;
    const size_t quantity = 3; // 3권으로 초기화
public:
    void initializeStock(const string& title){
        stock[title] = quantity;
    }

    void borrowBook(string title) {
        if (stock.find(title) == stock.end()) {
            cout << "\n책 제목이 잘못되었거나 존재하지 않습니다.\n";
            return;
        }

        if (stock[title] > 0) {
            stock[title]--;
            cout << "\n대여 완료: " << title << " (남은 재고: " << stock[title] << ")\n";
        }
        else {
            cout << "\n현재 재고가 부족하여 대여할 수 없습니다.\n";
        }

    }

    void returnBook(string title) {
        if (stock.find(title) == stock.end())
        {
            cout << "\n책 제목이 잘못되었거나 존재하지 않습니다.\n";
            return;
        }
        if (stock[title] >= quantity) {
            cout << "\n이미 해당 책이 최대 수량있습니다. 책 제목을 다시 확인해주세요.\n";
        }
        else {
            stock[title]++;
            cout << "\n반납 완료: " << title << " (현재 재고: " << stock[title] << ")\n";
        }
    }

    void CurrentStock(const string& title) const {
        auto it = stock.find(title);
        if (it != stock.end()) {
            cout << "\n" << title << "의 현재 재고: " << it->second << "\n\n";
        }
        else {
            cout << "\n책 제목이 잘못되었거나 존재하지 않습니다.\n";
        }
    }
};

int main() {
    BookManager bookManager;
    BorrowManager borrowManager;

    // 도서관 관리 프로그램의 기본 메뉴를 반복적으로 출력하여 사용자 입력을 처리합니다.
    // 프로그램 종료를 선택하기 전까지 계속 동작합니다.
    while (true) {
        cout << "\n도서관 관리 프로그램\n";
        cout << "1.책 추가   2.모든 책 출력   3.책 제목으로 검색   4.작가로 검색   5.책 대여   6.책 반납   7.종료\n";
        cout << "선택: ";
        int choice; // 사용자의 메뉴 선택을 저장
        cin >> choice;
        string title, author;

        if (choice == 1) { // 책 추가
            // 사용자로부터 책 제목과 저자명을 입력받아 BookManager에 추가
            cout << "\n책 제목: ";
            cin.ignore(); // 이전 입력의 잔여 버퍼를 제거
            getline(cin, title); // 제목 입력 (공백 포함)
            cout << "\n책 저자: ";
            getline(cin, author); // 저자명 입력 (공백 포함)
            bookManager.addBook(title, author); // 입력받은 책 정보를 추가
            borrowManager.initializeStock(title);
        }
        else if (choice == 2) { // 모든 책 출력
            // 현재 BookManager에 저장된 책 목록을 출력
            bookManager.displayAllBooks();
        }
        else if (choice == 3) { // 검색 : 제목
            cout << "\n검색할 제목: ";
            cin.ignore();
            getline(cin, title);

            const Book* book = bookManager.searchByTitle(title);
            if (book) {
                cout << "\n찾은 책: " << book->title << " by " << book->author << "\n";
                borrowManager.CurrentStock(book->title);
            }
            else {
                cout << "\n책을 찾을 수 없습니다.\n";
            }
        }
        else if (choice == 4) { // 검색 : 저자
            cout << "\n검색할 저자: ";
            cin.ignore();
            getline(cin, author);
            vector<const Book*> books = bookManager.searchByAuthor(author);
            if (!books.empty()) {
                cout << "\n찾은 책들:\n";
                for (const auto* book : books) {
                    cout << "- " << book->title << " by " << book->author << "\n";
                    borrowManager.CurrentStock(book->title);
                }
            }
            else {
                cout << "\n저자의 책을 찾을 수 없습니다.\n";
            }

        }
        else if (choice == 5) { // 대여
            cout << "\n대여할 책 제목: ";
            cin.ignore();
            getline(cin, title);
            borrowManager.borrowBook(title);
        }
        else if (choice == 6) { // 반납
            cout << "\n반납할 책 제목: ";
            cin.ignore();
            getline(cin, title);
            borrowManager.returnBook(title);
        }
        else if (choice == 7) { // 종료
            // 프로그램을 종료하고 사용자에게 메시지를 출력
            cout << "프로그램을 종료합니다." << endl;
            break;
        }
        else { // 잘못된 입력 처리
            cout << "잘못된 입력입니다. 다시 시도하세요." << endl;
        }
    }

    return 0; // 프로그램 정상 종료
}